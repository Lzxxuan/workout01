ggplot(data = andre_iguodala[andre_iguodala$shot_made_flag == "shot_yes",], aes(x = x, y = y)) + annotation_custom(court_image, -250, 250, -50, 420) + geom_point(color = "blue", alpha = 0.6) + ylim(-50, 420) + geom_density2d(color = "red") + ggtitle('Andre Iguodala Effective Shootings Distribution (2016 season)') + theme_minimal()
ggplot(andre_iguodala[andre_iguodala$shot_made_flag == "shot_yes",]) + geom_histogram(aes(minute), binwidth = 10, alpha = 0.8) + ggtitle('Histogram of Scored Points by Time Intervals (Andre Iguodala 2016 season)') + theme_minimal()
ggplot(data = klay_thompson[klay_thompson$shot_made_flag == "shot_yes",], aes(x = x, y = y)) + annotation_custom(court_image, -250, 250, -50, 420) + geom_point(color = "blue", alpha = 0.6) + ylim(-50, 420) + geom_density2d(color = "red") + ggtitle('Klay Thompson Effective Shootings Distribution (2016 season)') + theme_minimal()
ggplot(klay_thompson[klay_thompson$shot_made_flag == "shot_yes",]) + geom_histogram(aes(minute), binwidth = 10, alpha = 0.8) + ggtitle('Histogram of Scored Points by Time Intervals (Klay Thompson 2016 season)') + theme_minimal()
ggplot(data = stephen_curry[stephen_curry$shot_made_flag == "shot_yes",], aes(x = x, y = y)) + annotation_custom(court_image, -250, 250, -50, 420) + geom_point(color = "blue", alpha = 0.6) + ylim(-50, 420) + geom_density2d(color = "red") + ggtitle('Stephen Curry Effective Shootings Distribution (2016 season)') + theme_minimal()
ggplot(stephen_curry[stephen_curry$shot_made_flag == "shot_yes",]) + geom_histogram(aes(minute), binwidth = 10, alpha = 0.8) + ggtitle('Histogram of Scored Points by Time Intervals (Stephen Curry 2016 season)') + theme_minimal()
stephen_action_type <- table(stephen_curry$action_type)
barplot(tail(sort(stephen_action_type)))
ggplot(data = draymond_green[draymond_green$shot_made_flag == "shot_yes",], aes(x = x, y = y)) + annotation_custom(court_image, -250, 250, -50, 420) + geom_point(color = "blue", alpha = 0.6) + ylim(-50, 420) + geom_density2d(color = "red") + ggtitle('Draymond Green Effective Shootings Distribution (2016 season)') + theme_minimal()
ggplot(draymond_green[draymond_green$shot_made_flag == "shot_yes",]) + geom_histogram(aes(minute), binwidth = 10, alpha = 0.8) + ggtitle('Histogram of Scored Points by Time Intervals (Draymond Green 2016 season)') + theme_minimal()
ggplot(kevin_durant[kevin_durant$shot_made_flag == "shot_yes",]) + geom_histogram(aes(minute), binwidth = 10, alpha = 0.8) + ggtitle('Histogram of Scored Points by Time Intervals (Kevin Durant 2016 season)') + theme_minimal()
library(dplyr)
shot_data <- read.table("../data/shots-data.csv", header = TRUE, sep = ",")
arrange(summarise(group_by(shots_data, name), total = sum(shot_type == "2PT Field Goal"), made = sum(shot_made_flag == "shot_yes" & shot_type == "2PT Field Goal"), perc_made = made/total), desc(perc_made))
getwd()
ggplot(data = kevin_durant[kevin_durant$shot_made_flag == "shot_yes",], aes(x = x, y = y)) + annotation_custom(court_image, -250, 250, -50, 420) + geom_point(color = "blue", alpha = 0.6) + ylim(-50, 420) + geom_density2d(color = "red") + ggtitle('Kevin Durant Effective Shootings Distribution (2016 season)') + theme_minimal()
ggplot(data = kevin_durant[kevin_durant$shot_made_flag == "shot_yes",], aes(x = x, y = y)) + annotation_custom(court_image, -250, 250, -50, 420) + geom_point(color = "blue", alpha = 0.6) + ylim(-50, 420) + geom_density2d(color = "red") + ggtitle('Kevin Durant Effective Shootings Distribution (2016 season)') + theme_minimal()
kevin_durant[kevin_durant$shot_made_flag == "shot_yes",]
ggplot(data = kevin_durant[kevin_durant$shot_made_flag == "shot_yes",], aes(x = x, y = y)) + annotation_custom(court_image, -250, 250, -50, 420) + geom_point(color = "blue", alpha = 0.6) + ylim(-50, 420) + geom_density2d(color = "red") + ggtitle('Kevin Durant Effective Shootings Distribution (2016 season)') + theme_minimal()
ggplot(data = kevin_durant[kevin_durant$shot_made_flag == "shot_yes",], aes(x = x, y = y)) + annotation_custom(court_image, -250, 250, -50, 420) + geom_point(color = "blue", alpha = 0.6) + ylim(-50, 420) + geom_density2d(color = "red") + ggtitle('Kevin Durant Effective Shootings Distribution (2016 season)') + theme_minimal()
ggplot(kevin_durant[kevin_durant$shot_made_flag == "shot_yes",]) + geom_histogram(aes(minute), binwidth = 10, alpha = 0.8) + ggtitle('Histogram of Scored Points by Time Intervals (Kevin Durant 2016 season)') + theme_minimal()
getwd()
knitr::opts_chunk$set(echo = TRUE, error = TRUE)
#' @title Math Functions
#' @description calculates the assigned functions
#' @param x independent variable (numeric)
#' @return computed value
f <- function(x) {
y <- x^2
return(y)
}
g <- function(x) {
y <- 2*x + 5
return(y)
}
f(2)
f(-5)
g(0)
g(-5/2)
#' @title Composite Functions
#' @description calculates the composite functions
#' @param x independent variable (numeric)
#' @return computed value
fog <- function(x) {
y <- f (g(x))
return(y)
}
gof <- function(x) {
y <- g (f(x))
return(y)
}
fog(2)
fog(-5)
gof(0)
gof(-5/2)
#' @title Pythagoras Formula
#' @description calculates the length of the hypotenuse
#' @param a right triangle with a leg of length (numeric)
#' @param b right triangle with a leg of length (numeric)
#' @return the length of the hypotenuse
pythagoras <- function(a = 1, b = 1) {
if (a <= 0) {
stop("a must be positive")
}
if (b <= 0) {
stop("b must be positive")
}
hypotenuse <- sqrt(a^2 + b^2)
return(hypotenuse)
}
# legs are 3 and 4
pythagoras(3, 4)
pythagoras <- function(a = 1) {
if (a <= 0) {
stop("a must be positive")
}
hypotenuse <- sqrt(a^2 + a^2)
return(hypotenuse)
}
# legs are 5
pythagoras(5)
#' @title Area of a Circle
#' @description calculates the area of a circle
#' @param r the radius of a circle (numeric)
#' @return the area of the circle
circle_area <- function(r = 1) {
if (r <= 0) {
stop("radius cannot be negative")
}
area <- pi * r^2
return(area)
}
# radius 3
circle_area(r = 3)
# bad radius
circle_area(r = -2)
#' @title Surface area of a Cylinder
#' @description calculates the surface area of a cylinder
#' @param r the radius of a cylinder (numeric)
#' @param h the height of a cylinder
#' @return the surface area of the cylinder
cylinder_area <- function(r = 1, h = 1) {
if (r <= 0) {
stop("radius cannot be negative")
}
if (h <= 0) {
stop("height cannot be negative")
}
surface <- 2*circle_area(r) + 2 * pi * r * h
return(surface)
}
# default (radius 1, height 1)
cylinder_area()
# radius 2, height 3
cylinder_area(r = 2, h = 3)
# bad radius
cylinder_area(r = -2, h = 1)
# bad height
cylinder_area(r = 2, h = -1)
# bad radius and height
cylinder_area(r = -2, h = -1)
#' @title Volume of a Cylinder
#' @description calculates the volume of a cylinder
#' @param r the radius of a cylinder (numeric)
#' @param h the height of a cylinder
#' @return the volume of the cylinder
cylinder_volume <- function(r = 1, h = 1) {
if (r <= 0) {
stop("radius cannot be negative")
}
if (h <= 0) {
stop("height cannot be negative")
}
volume <- circle_area(r) * h
return(volume)
}
# default (radius 1, height 1)
cylinder_volume()
cylinder_volume(r = 3, h = 10)
cylinder_volume(h = 10, r = 3)
#' @title Unit Conversion from seconds to years
#' @description convert the units from seconds to years
#' @param x the number in seconds unit (numeric)
#' @return the number in years units
seconds2years <- function(x = 1) {
y <- 31536000 * x
return(y)
}
seconds2years(1000000000)
#' @title A function for a given polynomial
#' @description calculates the function of a given polynomial
#' @param x a number within the interval (numeric)
#' @return the value of the function
poly1 <- function(x) {
y <- (x^3)
return(y)
}
# set of points
x <- seq(-4, 4, length.out = 20)
y <- poly1(x)
# graph polynomial
plot(x,y, type = "l", lwd = 3, col = "#FB7215", las = 1)
abline(h = 0, v = 0, col = '#888888aa', lwd = 1.5)
title(main = expression(paste(f(x), ' = ', x^3)))
poly2 <- function(x) {
y <- ((x^2 - 1)(x + 3)^3)
return(y)
}
# set of points
x <- seq(-4, 4, length.out = 20)
y <- poly1(x)
# graph polynomial
plot(x,y, type = "l", lwd = 3, col = "#FB7215", las = 1)
abline(h = 0, v = 0, col = '#888888aa', lwd = 1.5)
title(main = expression(paste(f(x), ' = ', (x^2 - 1)(x + 3)^3)))
poly3 <- function(x) {
y <- ((x^2 - 1)(x^2 - 9))
return(y)
}
# set of points
x <- seq(-4, 4, length.out = 20)
y <- poly1(x)
# graph polynomial
plot(x,y, type = "l", lwd = 3, col = "#FB7215", las = 1)
abline(h = 0, v = 0, col = '#888888aa', lwd = 1.5)
title(main = expression(paste(f(x), ' = ', (x^2 - 1)(x^2 - 9))))
z <- 100 * pi
if (z < 0) {
print("number less than 0 is replaced by 0")
} else if (z > 100){
print("number greater than 100 is replaced by 100")
} else {
print("stay the same")
}
y <- 2
if (y > 0) {
print("positive")
} else if (y < 0) {
print("negative")
} else {
print("zero?")
}
#' @title even number function
#' @description A function to test whether a number is even
#' @param x (numeric)
#' @return whether it is even
is_even <- function (x) {
if (x %% 2 == 0) {
print ("TRUE")
} else if (x %% 2 != 0) {
print("FALSE")
} else if (is.numeric(x) == FALSE){
print ("NA")
}
}
is_even (10)
is_even (33)
is_even ('a')
#' @title odd number function
#' @description A function to test whether a number is odd
#' @param x (numeric)
#' @return whether it is odd
is_odd <- function (x) {
if (is_even(x) == FALSE) {
print ("TRUE")
} else if (is_even(x) == TRUE) {
print("FALSE")
} else if (is.numeric(x) == FALSE){
print ("NA")
}
}
is_odd (1)
is_odd (4)
is_odd ('a')
#' @title Grading Function
#' @description A function that returns a letter grade of the score
#' @param x (numeric)
#' @return what letter grade it is
grade <- function (x) {
if (x >= 90 & x <= 100) {
letter <- "A"
} else if(x >= 80 & x < 90) {
letter <- "B"
} else if(x >= 70 & x < 80) {
letter <- "C"
} else if(x >= 60 & x < 70) {
letter <- "D"
} else if(x >=0 & x < 60) {
letter <- "F"
} else if(x < 0 | x > 100) {
stop("score must be a number between 0 and 100")
}
return(letter)
}
grade(90)
grade(89.9999)
grade(70.0000001)
grade(50)
#' @title Unit Conversion from miles to other units
#' @description convert the units from miles to other units
#' @param x the number in miles unit (numeric)
#' @return the number in other units
## miles2inches
miles2inches <- function(x = 1) {
y <- 63360 * x
return(y)
}
miles2inches(2)
## miles2feet
miles2feet <- function(x = 1) {
y <- 5280 * x
return(y)
}
miles2feet(2)
## miles2yards
miles2yards <- function(x = 1) {
y <- 1760 * x
return(y)
}
miles2yards(2)
## miles2meters
miles2meters <- function(x = 1) {
y <- 1609.34 * x
return(y)
}
miles2meters(2)
## miles2kms
miles2kms <- function(x = 1) {
y <- 1.60934 * x
return(y)
}
miles2kms(2)
convert <- function(x = 1, to = "km")
switch(to ,
"in" = miles2inches(x),
"ft" = miles2feet(x),
"yd" = miles2yards(x),
"m" = miles2meters(x),
"km" = miles2kms(x))
convert(3, "in")
convert(1, "ft")
convert(2, "yd")
convert(1, "m")
convert(1, "km")
#' @title Surface area of a Cylinder
#' @description calculates the surface area of a cylinder
#' @param r the radius of a cylinder (numeric)
#' @param h the height of a cylinder
#' @return the surface area of the cylinder
cylinder_area <- function(r = 1, h = 1) {
if (r <= 0) {
stop("radius cannot be negative")
}
if (h <= 0) {
stop("height cannot be negative")
}
surface <- 2*circle_area(r) + 2 * pi * r * h
return(surface)
}
# default (radius 1, height 1)
cylinder_area()
# radius 2, height 3
cylinder_area(r = 2, h = 3)
# bad radius
cylinder_area(r = -2, h = 1)
# bad height
cylinder_area(r = 2, h = -1)
# bad radius and height
cylinder_area(r = -2, h = -1)
#' @title Volume of a Cylinder
#' @description calculates the volume of a cylinder
#' @param r the radius of a cylinder (numeric)
#' @param h the height of a cylinder
#' @return the volume of the cylinder
cylinder_volume <- function(r = 1, h = 1) {
if (r <= 0) {
stop("radius cannot be negative")
}
if (h <= 0) {
stop("height cannot be negative")
}
volume <- circle_area(r) * h
return(volume)
}
# default (radius 1, height 1)
cylinder_volume()
cylinder_volume(r = 3, h = 10)
cylinder_volume(h = 10, r = 3)
#' @title Unit Conversion from seconds to years
#' @description convert the units from seconds to years
#' @param x the number in seconds unit (numeric)
#' @return the number in years units
seconds2years <- function(x = 1) {
y <- 31536000 * x
return(y)
}
seconds2years(1000000000)
#' @title A function for a given polynomial
#' @description calculates the function of a given polynomial
#' @param x a number within the interval (numeric)
#' @return the value of the function
poly1 <- function(x) {
y <- (x^3)
return(y)
}
# set of points
x <- seq(-4, 4, length.out = 20)
y <- poly1(x)
# graph polynomial
plot(x,y, type = "l", lwd = 3, col = "#FB7215", las = 1)
abline(h = 0, v = 0, col = '#888888aa', lwd = 1.5)
title(main = expression(paste(f(x), ' = ', x^3)))
poly2 <- function(x) {
y <- ((x^2 - 1)(x + 3)^3)
return(y)
}
# set of points
x <- seq(-4, 4, length.out = 20)
y <- poly1(x)
# graph polynomial
plot(x,y, type = "l", lwd = 3, col = "#FB7215", las = 1)
abline(h = 0, v = 0, col = '#888888aa', lwd = 1.5)
title(main = expression(paste(f(x), ' = ', (x^2 - 1)(x + 3)^3)))
poly3 <- function(x) {
y <- ((x^2 - 1)(x^2 - 9))
return(y)
}
# set of points
x <- seq(-4, 4, length.out = 20)
y <- poly1(x)
# graph polynomial
plot(x,y, type = "l", lwd = 3, col = "#FB7215", las = 1)
abline(h = 0, v = 0, col = '#888888aa', lwd = 1.5)
title(main = expression(paste(f(x), ' = ', (x^2 - 1)(x^2 - 9))))
z <- 100 * pi
if (z < 0) {
print("number less than 0 is replaced by 0")
} else if (z > 100){
print("number greater than 100 is replaced by 100")
} else {
print("stay the same")
}
y <- 2
if (y > 0) {
print("positive")
} else if (y < 0) {
print("negative")
} else {
print("zero?")
}
#' @title even number function
#' @description A function to test whether a number is even
#' @param x (numeric)
#' @return whether it is even
is_even <- function (x) {
if (x %% 2 == 0) {
print ("TRUE")
} else if (x %% 2 != 0) {
print("FALSE")
} else if (is.numeric(x) == FALSE){
print ("NA")
}
}
is_even (10)
is_even (33)
is_even ('a')
#' @title odd number function
#' @description A function to test whether a number is odd
#' @param x (numeric)
#' @return whether it is odd
is_odd <- function (x) {
if (is_even(x) == FALSE) {
print ("TRUE")
} else if (is_even(x) == TRUE) {
print("FALSE")
} else if (is.numeric(x) == FALSE){
print ("NA")
}
}
is_odd (1)
is_odd (4)
is_odd ('a')
#' @title Grading Function
#' @description A function that returns a letter grade of the score
#' @param x (numeric)
#' @return what letter grade it is
grade <- function (x) {
if (x >= 90 & x <= 100) {
letter <- "A"
} else if(x >= 80 & x < 90) {
letter <- "B"
} else if(x >= 70 & x < 80) {
letter <- "C"
} else if(x >= 60 & x < 70) {
letter <- "D"
} else if(x >=0 & x < 60) {
letter <- "F"
} else if(x < 0 | x > 100) {
stop("score must be a number between 0 and 100")
}
return(letter)
}
grade(90)
grade(89.9999)
grade(70.0000001)
grade(50)
#' @title Unit Conversion from miles to other units
#' @description convert the units from miles to other units
#' @param x the number in miles unit (numeric)
#' @return the number in other units
## miles2inches
miles2inches <- function(x = 1) {
y <- 63360 * x
return(y)
}
miles2inches(2)
## miles2feet
miles2feet <- function(x = 1) {
y <- 5280 * x
return(y)
}
miles2feet(2)
## miles2yards
miles2yards <- function(x = 1) {
y <- 1760 * x
return(y)
}
miles2yards(2)
## miles2meters
miles2meters <- function(x = 1) {
y <- 1609.34 * x
return(y)
}
miles2meters(2)
## miles2kms
miles2kms <- function(x = 1) {
y <- 1.60934 * x
return(y)
}
miles2kms(2)
convert <- function(x = 1, to = "km")
switch(to ,
"in" = miles2inches(x),
"ft" = miles2feet(x),
"yd" = miles2yards(x),
"m" = miles2meters(x),
"km" = miles2kms(x))
convert(3, "in")
convert(1, "ft")
convert(2, "yd")
convert(1, "m")
convert(1, "km")
